float aux1 = x[2]*x[2] - x[3]*x[3] - x[4]*x[4] + x[5]*x[5];
float aux2 = 2*x[2]*rz + 2*x[3]*ry - 2*x[4]*rx;
float aux3 = 2*x[2]*x[4] - 2*x[3]*x[5];
float aux4 = 2*x[2]*x[3] + 2*x[4]*x[5];
float aux5 = 2*x[3]*rx + 2*x[4]*ry + 2*x[5]*rz;
float aux6 = 2*x[2]*rx + 2*x[4]*rz - 2*x[5]*ry;
float aux7 = 2*x[2]*ry - 2*x[3]*rz + 2*x[5]*rx;

// 1 column
H[0] =  -1/(aux1);
// 2 column
H[1] =  0;
// 3 column
H[2] =  (x[3]*((aux2)/(aux1) - (2*x[2]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 - (x[2]*((aux7)/(aux1) + (2*x[3]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 + (x[5]*((aux6)/(aux1) - (2*x[4]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 + (x[4]*((aux5)/(aux1) - (2*x[5]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2;
// 4 column
H[3] =  (x[4]*((aux2)/(aux1) - (2*x[2]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 + (x[2]*((aux6)/(aux1) - (2*x[4]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 + (x[5]*((aux7)/(aux1) + (2*x[3]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 - (x[3]*((aux5)/(aux1) - (2*x[5]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2;
// 5 column
H[4] =  (x[5]*((aux2)/(aux1) - (2*x[2]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 - (x[4]*((aux7)/(aux1) + (2*x[3]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 - (x[3]*((aux6)/(aux1) - (2*x[4]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2 - (x[2]*((aux5)/(aux1) - (2*x[5]*(x[0] + rz*(aux1) - rx*(aux3) + ry*(aux4)))/(aux1)^2))/2;
// 6 column
H[5] =  0;
// 7 column
H[6] =  0;
// 8 column
H[7] =  0;
